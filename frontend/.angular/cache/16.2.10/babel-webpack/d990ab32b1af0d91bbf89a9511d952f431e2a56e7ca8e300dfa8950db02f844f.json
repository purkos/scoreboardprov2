{"ast":null,"code":"import { inject } from '@angular/core';\nimport { HttpClient, HttpHeaders } from \"@angular/common/http\";\nimport { enviroment } from \"../enviroment/enviroment\";\nimport { JwtHelperService } from \"@auth0/angular-jwt\";\nimport * as i0 from \"@angular/core\";\nexport class AuthService {\n  constructor() {\n    this.http = inject(HttpClient);\n    this.apiUrl = enviroment.apiUrl;\n    this.jwtHelper = new JwtHelperService();\n    this.user = {\n      username: ''\n    };\n  }\n  //frontend login\n  login(user) {\n    const loginUrl = `${this.apiUrl}/auth/login`;\n    return this.http.post(loginUrl, user);\n  }\n  //frontend registration\n  register(user) {\n    const registerUrl = `${this.apiUrl}/auth/register`;\n    return this.http.post(registerUrl, user);\n  }\n  getUserData(token) {\n    const userUrl = `${this.apiUrl}/user`;\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    });\n    const options = {\n      headers: headers\n    };\n    return this.http.get(`${userUrl}`, options);\n    // const decodedToken = this.decodeToken(token)\n    // const decodedToken = this.jwtHelper.decodeToken(token);\n    // return this.http.get(userUrl)\n  }\n\n  setToken(token) {\n    localStorage.setItem('Token', token);\n  }\n  userData() {}\n  setUserData(data) {\n    // this.user.username = data.username\n    console.log(data.username);\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["inject","HttpClient","HttpHeaders","enviroment","JwtHelperService","AuthService","constructor","http","apiUrl","jwtHelper","user","username","login","loginUrl","post","register","registerUrl","getUserData","token","userUrl","headers","options","get","setToken","localStorage","setItem","userData","setUserData","data","console","log","_","_2","factory","ɵfac","providedIn"],"sources":["/Users/puurkos/Desktop/ANGULAR/scoreboardprov2/frontend/src/app/services/auth.service.ts"],"sourcesContent":["import {inject, Injectable} from '@angular/core';\nimport {User} from \"../models/user.model\";\nimport {HttpClient, HttpHeaders} from \"@angular/common/http\";\nimport {enviroment} from \"../enviroment/enviroment\";\nimport {Observable} from \"rxjs\";\nimport {JwtHelperService} from \"@auth0/angular-jwt\";\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class AuthService {\n    private http = inject(HttpClient)\n    readonly apiUrl = enviroment.apiUrl;\n    private jwtHelper = new JwtHelperService();\n    user :User = {\n        username:'',\n    }\n    constructor() {\n    }\n    //frontend login\n    login(user: User): Observable<any> {\n        const loginUrl = `${this.apiUrl}/auth/login`;\n        return this.http.post(loginUrl, user);\n    }\n    //frontend registration\n    register(user: User): Observable<any> {\n        const registerUrl = `${this.apiUrl}/auth/register`;\n        return this.http.post(registerUrl, user);\n    }\n\n    getUserData(token: string) {\n        const userUrl = `${this.apiUrl}/user`;\n        const headers = new HttpHeaders({\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${token}`\n        })\n        const options = {headers: headers};\n        return this.http.get(`${userUrl}`,options)\n        // const decodedToken = this.decodeToken(token)\n        // const decodedToken = this.jwtHelper.decodeToken(token);\n        // return this.http.get(userUrl)\n    }\n    setToken(token:string) {\n        localStorage.setItem('Token',token)\n    }\n    userData() {\n\n    }\n    setUserData(data:any) {\n        // this.user.username = data.username\n        console.log(data.username)\n    }\n}\n"],"mappings":"AAAA,SAAQA,MAAM,QAAmB,eAAe;AAEhD,SAAQC,UAAU,EAAEC,WAAW,QAAO,sBAAsB;AAC5D,SAAQC,UAAU,QAAO,0BAA0B;AAEnD,SAAQC,gBAAgB,QAAO,oBAAoB;;AAKnD,OAAM,MAAOC,WAAW;EAOpBC,YAAA;IANQ,KAAAC,IAAI,GAAGP,MAAM,CAACC,UAAU,CAAC;IACxB,KAAAO,MAAM,GAAGL,UAAU,CAACK,MAAM;IAC3B,KAAAC,SAAS,GAAG,IAAIL,gBAAgB,EAAE;IAC1C,KAAAM,IAAI,GAAS;MACTC,QAAQ,EAAC;KACZ;EAED;EACA;EACAC,KAAKA,CAACF,IAAU;IACZ,MAAMG,QAAQ,GAAG,GAAG,IAAI,CAACL,MAAM,aAAa;IAC5C,OAAO,IAAI,CAACD,IAAI,CAACO,IAAI,CAACD,QAAQ,EAAEH,IAAI,CAAC;EACzC;EACA;EACAK,QAAQA,CAACL,IAAU;IACf,MAAMM,WAAW,GAAG,GAAG,IAAI,CAACR,MAAM,gBAAgB;IAClD,OAAO,IAAI,CAACD,IAAI,CAACO,IAAI,CAACE,WAAW,EAAEN,IAAI,CAAC;EAC5C;EAEAO,WAAWA,CAACC,KAAa;IACrB,MAAMC,OAAO,GAAG,GAAG,IAAI,CAACX,MAAM,OAAO;IACrC,MAAMY,OAAO,GAAG,IAAIlB,WAAW,CAAC;MAC5B,cAAc,EAAE,kBAAkB;MAClC,eAAe,EAAE,UAAUgB,KAAK;KACnC,CAAC;IACF,MAAMG,OAAO,GAAG;MAACD,OAAO,EAAEA;IAAO,CAAC;IAClC,OAAO,IAAI,CAACb,IAAI,CAACe,GAAG,CAAC,GAAGH,OAAO,EAAE,EAACE,OAAO,CAAC;IAC1C;IACA;IACA;EACJ;;EACAE,QAAQA,CAACL,KAAY;IACjBM,YAAY,CAACC,OAAO,CAAC,OAAO,EAACP,KAAK,CAAC;EACvC;EACAQ,QAAQA,CAAA,GAER;EACAC,WAAWA,CAACC,IAAQ;IAChB;IACAC,OAAO,CAACC,GAAG,CAACF,IAAI,CAACjB,QAAQ,CAAC;EAC9B;EAAC,QAAAoB,CAAA,G;qBAzCQ1B,WAAW;EAAA;EAAA,QAAA2B,EAAA,G;WAAX3B,WAAW;IAAA4B,OAAA,EAAX5B,WAAW,CAAA6B,IAAA;IAAAC,UAAA,EAFR;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}