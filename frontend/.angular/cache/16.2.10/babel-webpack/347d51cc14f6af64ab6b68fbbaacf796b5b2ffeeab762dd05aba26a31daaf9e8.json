{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, inject } from '@angular/core';\nimport { NgIf, UpperCasePipe } from \"@angular/common\";\nimport { FormBuilder, ReactiveFormsModule, Validators } from \"@angular/forms\";\nimport { AuthService } from \"../../services/auth.service\";\nexport let AuthComponent = class AuthComponent {\n  constructor() {\n    this.isLoginMode = true;\n    this.fb = inject(FormBuilder);\n    this.authService = inject(AuthService);\n    this.responseResult = 'Wrong credientials';\n    this.user = {\n      username: '',\n      password: ''\n    };\n  }\n  ngOnInit() {\n    this.authForm = this.fb.group({\n      login: ['', [Validators.required, Validators.minLength(6)]],\n      password: ['', [Validators.required, Validators.minLength(6)]]\n    });\n  }\n  onSubmit() {\n    this.user.username = this.authForm.value.login;\n    this.user.password = this.authForm.value.password;\n    if (this.isLoginMode) {\n      //login post\n      this.authService.login(this.user).subscribe(response => {\n        console.log(response);\n      }, error => {\n        this.responseResult = error.error.error;\n      });\n    } else {\n      //register post\n      this.authService.register(this.user).subscribe(response => {\n        console.log(response);\n      }, error => {\n        console.error(error);\n      });\n    }\n    this.authForm.reset();\n  }\n  toggleMode() {\n    this.isLoginMode = !this.isLoginMode;\n    this.authForm.reset();\n  }\n};\nAuthComponent = __decorate([Component({\n  standalone: true,\n  selector: 'app-auth',\n  templateUrl: './auth.component.html',\n  imports: [NgIf, ReactiveFormsModule, UpperCasePipe],\n  styleUrls: ['./auth.component.sass']\n})], AuthComponent);","map":{"version":3,"names":["Component","inject","NgIf","UpperCasePipe","FormBuilder","ReactiveFormsModule","Validators","AuthService","AuthComponent","constructor","isLoginMode","fb","authService","responseResult","user","username","password","ngOnInit","authForm","group","login","required","minLength","onSubmit","value","subscribe","response","console","log","error","register","reset","toggleMode","__decorate","standalone","selector","templateUrl","imports","styleUrls"],"sources":["/Users/puurkos/Desktop/ANGULAR/scoreboardprov2/frontend/src/app/pages/auth/auth.component.ts"],"sourcesContent":["import {Component, inject, OnInit} from '@angular/core';\nimport {NgIf, UpperCasePipe} from \"@angular/common\";\nimport {Form, FormBuilder, FormGroup, FormsModule, ReactiveFormsModule, Validators} from \"@angular/forms\";\nimport {AuthService} from \"../../services/auth.service\";\nimport {HttpClient} from \"@angular/common/http\";\nimport {User} from \"../../models/user.model\";\n\n@Component({\n  standalone: true,\n  selector: 'app-auth',\n  templateUrl: './auth.component.html',\n  imports: [\n    NgIf,\n    ReactiveFormsModule,\n    UpperCasePipe\n  ],\n  styleUrls: ['./auth.component.sass']\n})\nexport class AuthComponent implements OnInit{\n  isLoginMode = true;\n  private fb = inject(FormBuilder);\n  private authService = inject(AuthService);\n  responseResult: string = 'Wrong credientials';\n  user: User = {\n    username:'',\n    password:''\n  }\n  authForm! : FormGroup\n\n  ngOnInit(): void {\n    this.authForm = this.fb.group({\n      login: ['',[Validators.required, Validators.minLength(6)]],\n      password: ['',[Validators.required, Validators.minLength(6)]],\n    })\n  }\n  onSubmit() {\n    this.user.username = this.authForm.value.login;\n    this.user.password = this.authForm.value.password;\n    if(this.isLoginMode) {\n      //login post\n      this.authService.login(this.user).subscribe(\n          (response)=>{\n              console.log(response)\n          },\n          (error)=> {\n              this.responseResult = error.error.error;\n          }\n      )\n    } else {\n      //register post\n      this.authService.register(this.user).subscribe(\n          (response)=>{\n              console.log(response)\n          },\n          (error)=> {\n              console.error(error)\n          }\n      )\n    }\n    this.authForm.reset()\n  }\n  toggleMode() {\n    this.isLoginMode = !this.isLoginMode;\n    this.authForm.reset();\n  }\n\n}\n"],"mappings":";AAAA,SAAQA,SAAS,EAAEC,MAAM,QAAe,eAAe;AACvD,SAAQC,IAAI,EAAEC,aAAa,QAAO,iBAAiB;AACnD,SAAcC,WAAW,EAA0BC,mBAAmB,EAAEC,UAAU,QAAO,gBAAgB;AACzG,SAAQC,WAAW,QAAO,6BAA6B;AAehD,WAAMC,aAAa,GAAnB,MAAMA,aAAa;EAAnBC,YAAA;IACL,KAAAC,WAAW,GAAG,IAAI;IACV,KAAAC,EAAE,GAAGV,MAAM,CAACG,WAAW,CAAC;IACxB,KAAAQ,WAAW,GAAGX,MAAM,CAACM,WAAW,CAAC;IACzC,KAAAM,cAAc,GAAW,oBAAoB;IAC7C,KAAAC,IAAI,GAAS;MACXC,QAAQ,EAAC,EAAE;MACXC,QAAQ,EAAC;KACV;EAwCH;EArCEC,QAAQA,CAAA;IACN,IAAI,CAACC,QAAQ,GAAG,IAAI,CAACP,EAAE,CAACQ,KAAK,CAAC;MAC5BC,KAAK,EAAE,CAAC,EAAE,EAAC,CAACd,UAAU,CAACe,QAAQ,EAAEf,UAAU,CAACgB,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;MAC1DN,QAAQ,EAAE,CAAC,EAAE,EAAC,CAACV,UAAU,CAACe,QAAQ,EAAEf,UAAU,CAACgB,SAAS,CAAC,CAAC,CAAC,CAAC;KAC7D,CAAC;EACJ;EACAC,QAAQA,CAAA;IACN,IAAI,CAACT,IAAI,CAACC,QAAQ,GAAG,IAAI,CAACG,QAAQ,CAACM,KAAK,CAACJ,KAAK;IAC9C,IAAI,CAACN,IAAI,CAACE,QAAQ,GAAG,IAAI,CAACE,QAAQ,CAACM,KAAK,CAACR,QAAQ;IACjD,IAAG,IAAI,CAACN,WAAW,EAAE;MACnB;MACA,IAAI,CAACE,WAAW,CAACQ,KAAK,CAAC,IAAI,CAACN,IAAI,CAAC,CAACW,SAAS,CACtCC,QAAQ,IAAG;QACRC,OAAO,CAACC,GAAG,CAACF,QAAQ,CAAC;MACzB,CAAC,EACAG,KAAK,IAAG;QACL,IAAI,CAAChB,cAAc,GAAGgB,KAAK,CAACA,KAAK,CAACA,KAAK;MAC3C,CAAC,CACJ;KACF,MAAM;MACL;MACA,IAAI,CAACjB,WAAW,CAACkB,QAAQ,CAAC,IAAI,CAAChB,IAAI,CAAC,CAACW,SAAS,CACzCC,QAAQ,IAAG;QACRC,OAAO,CAACC,GAAG,CAACF,QAAQ,CAAC;MACzB,CAAC,EACAG,KAAK,IAAG;QACLF,OAAO,CAACE,KAAK,CAACA,KAAK,CAAC;MACxB,CAAC,CACJ;;IAEH,IAAI,CAACX,QAAQ,CAACa,KAAK,EAAE;EACvB;EACAC,UAAUA,CAAA;IACR,IAAI,CAACtB,WAAW,GAAG,CAAC,IAAI,CAACA,WAAW;IACpC,IAAI,CAACQ,QAAQ,CAACa,KAAK,EAAE;EACvB;CAED;AAhDYvB,aAAa,GAAAyB,UAAA,EAXzBjC,SAAS,CAAC;EACTkC,UAAU,EAAE,IAAI;EAChBC,QAAQ,EAAE,UAAU;EACpBC,WAAW,EAAE,uBAAuB;EACpCC,OAAO,EAAE,CACPnC,IAAI,EACJG,mBAAmB,EACnBF,aAAa,CACd;EACDmC,SAAS,EAAE,CAAC,uBAAuB;CACpC,CAAC,C,EACW9B,aAAa,CAgDzB"},"metadata":{},"sourceType":"module","externalDependencies":[]}