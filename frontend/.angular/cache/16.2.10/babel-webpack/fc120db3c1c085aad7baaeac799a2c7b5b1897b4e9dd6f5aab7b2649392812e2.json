{"ast":null,"code":"import { inject } from '@angular/core';\nimport { HttpClient } from \"@angular/common/http\";\nimport { enviroment } from \"../enviroment/enviroment\";\nimport * as i0 from \"@angular/core\";\nexport class AuthService {\n  constructor() {\n    this.http = inject(HttpClient);\n    this.apiUrl = enviroment.apiUrl;\n  }\n  login(user) {\n    const loginUrl = `${this.apiUrl}/auth/login`;\n    return this.http.post(loginUrl, user);\n  }\n  register(user) {\n    const registerUrl = `${this.apiUrl}/auth/register`;\n    return this.http.post(registerUrl, user);\n  }\n  getUserData(token) {\n    const userUrl = `${this.apiUrl}/user/`;\n    // const decodedToken = this.decodeToken(token)\n    const decodedToken = this.jwtHelper.decodeToken(token);\n    // return this.http.get(userUrl)\n  }\n\n  decodeToken(token) {\n    const payload = token.split('.')[1];\n    return JSON.parse(payload);\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["inject","HttpClient","enviroment","AuthService","constructor","http","apiUrl","login","user","loginUrl","post","register","registerUrl","getUserData","token","userUrl","decodedToken","jwtHelper","decodeToken","payload","split","JSON","parse","_","_2","factory","ɵfac","providedIn"],"sources":["/Users/puurkos/Desktop/ANGULAR/scoreboardprov2/frontend/src/app/services/auth.service.ts"],"sourcesContent":["import {inject, Injectable} from '@angular/core';\nimport {User} from \"../models/user.model\";\nimport {HttpClient} from \"@angular/common/http\";\nimport {enviroment} from \"../enviroment/enviroment\";\nimport {Observable} from \"rxjs\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private http = inject(HttpClient)\n  readonly apiUrl = enviroment.apiUrl;\n  private jwtHelper: any;\n  constructor() { }\n  login(user:User):Observable<any> {\n    const loginUrl = `${this.apiUrl}/auth/login`;\n    return this.http.post(loginUrl, user);\n  }\n  register(user:User):Observable<any> {\n    const registerUrl = `${this.apiUrl}/auth/register`;\n    return this.http.post(registerUrl, user);\n  }\n  getUserData(token:string) {\n\n    const userUrl = `${this.apiUrl}/user/`;\n    // const decodedToken = this.decodeToken(token)\n    const decodedToken = this.jwtHelper.decodeToken(token);\n\n    // return this.http.get(userUrl)\n  }\n  private decodeToken(token:string):any {\n    const payload = token.split('.')[1];\n    return JSON.parse(payload);\n  }\n}\n"],"mappings":"AAAA,SAAQA,MAAM,QAAmB,eAAe;AAEhD,SAAQC,UAAU,QAAO,sBAAsB;AAC/C,SAAQC,UAAU,QAAO,0BAA0B;;AAMnD,OAAM,MAAOC,WAAW;EAItBC,YAAA;IAHQ,KAAAC,IAAI,GAAGL,MAAM,CAACC,UAAU,CAAC;IACxB,KAAAK,MAAM,GAAGJ,UAAU,CAACI,MAAM;EAEnB;EAChBC,KAAKA,CAACC,IAAS;IACb,MAAMC,QAAQ,GAAG,GAAG,IAAI,CAACH,MAAM,aAAa;IAC5C,OAAO,IAAI,CAACD,IAAI,CAACK,IAAI,CAACD,QAAQ,EAAED,IAAI,CAAC;EACvC;EACAG,QAAQA,CAACH,IAAS;IAChB,MAAMI,WAAW,GAAG,GAAG,IAAI,CAACN,MAAM,gBAAgB;IAClD,OAAO,IAAI,CAACD,IAAI,CAACK,IAAI,CAACE,WAAW,EAAEJ,IAAI,CAAC;EAC1C;EACAK,WAAWA,CAACC,KAAY;IAEtB,MAAMC,OAAO,GAAG,GAAG,IAAI,CAACT,MAAM,QAAQ;IACtC;IACA,MAAMU,YAAY,GAAG,IAAI,CAACC,SAAS,CAACC,WAAW,CAACJ,KAAK,CAAC;IAEtD;EACF;;EACQI,WAAWA,CAACJ,KAAY;IAC9B,MAAMK,OAAO,GAAGL,KAAK,CAACM,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACnC,OAAOC,IAAI,CAACC,KAAK,CAACH,OAAO,CAAC;EAC5B;EAAC,QAAAI,CAAA,G;qBAxBUpB,WAAW;EAAA;EAAA,QAAAqB,EAAA,G;WAAXrB,WAAW;IAAAsB,OAAA,EAAXtB,WAAW,CAAAuB,IAAA;IAAAC,UAAA,EAFV;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}