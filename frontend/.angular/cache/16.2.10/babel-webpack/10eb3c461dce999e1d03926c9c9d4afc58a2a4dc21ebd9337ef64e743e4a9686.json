{"ast":null,"code":"import { inject } from '@angular/core';\nimport { HttpClient, HttpHeaders } from \"@angular/common/http\";\nimport { enviroment } from \"../enviroment/enviroment\";\nimport { JwtHelperService } from \"@auth0/angular-jwt\";\nimport * as i0 from \"@angular/core\";\nexport class AuthService {\n  constructor() {\n    this.http = inject(HttpClient);\n    this.apiUrl = enviroment.apiUrl;\n    this.jwtHelper = new JwtHelperService();\n  }\n  login(user) {\n    const loginUrl = `${this.apiUrl}/auth/login`;\n    return this.http.post(loginUrl, user);\n  }\n  register(user) {\n    const registerUrl = `${this.apiUrl}/auth/register`;\n    return this.http.post(registerUrl, user);\n  }\n  getUserData(token) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    });\n    const options = {\n      headers: headers\n    };\n    // const decodedToken = this.decodeToken(token)\n    // const decodedToken = this.jwtHelper.decodeToken(token);\n    // const userUrl = `${this.apiUrl}/user/${decodedToken.username}`;\n    return this.http.get(userUrl);\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["inject","HttpClient","HttpHeaders","enviroment","JwtHelperService","AuthService","constructor","http","apiUrl","jwtHelper","login","user","loginUrl","post","register","registerUrl","getUserData","token","headers","options","get","userUrl","_","_2","factory","ɵfac","providedIn"],"sources":["/Users/puurkos/Desktop/ANGULAR/scoreboardprov2/frontend/src/app/services/auth.service.ts"],"sourcesContent":["import {inject, Injectable} from '@angular/core';\nimport {User} from \"../models/user.model\";\nimport {HttpClient, HttpHeaders} from \"@angular/common/http\";\nimport {enviroment} from \"../enviroment/enviroment\";\nimport {Observable} from \"rxjs\";\nimport {JwtHelperService} from \"@auth0/angular-jwt\";\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class AuthService {\n    private http = inject(HttpClient)\n    readonly apiUrl = enviroment.apiUrl;\n    private jwtHelper = new JwtHelperService();\n\n    constructor() {\n    }\n\n    login(user: User): Observable<any> {\n        const loginUrl = `${this.apiUrl}/auth/login`;\n        return this.http.post(loginUrl, user);\n    }\n\n    register(user: User): Observable<any> {\n        const registerUrl = `${this.apiUrl}/auth/register`;\n        return this.http.post(registerUrl, user);\n    }\n\n    getUserData(token: string) {\n        const headers = new HttpHeaders({\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${token}`\n        })\n        const options = {headers: headers};\n    \n        // const decodedToken = this.decodeToken(token)\n        // const decodedToken = this.jwtHelper.decodeToken(token);\n        // const userUrl = `${this.apiUrl}/user/${decodedToken.username}`;\n\n        return this.http.get(userUrl)\n    }\n}\n"],"mappings":"AAAA,SAAQA,MAAM,QAAmB,eAAe;AAEhD,SAAQC,UAAU,EAAEC,WAAW,QAAO,sBAAsB;AAC5D,SAAQC,UAAU,QAAO,0BAA0B;AAEnD,SAAQC,gBAAgB,QAAO,oBAAoB;;AAKnD,OAAM,MAAOC,WAAW;EAKpBC,YAAA;IAJQ,KAAAC,IAAI,GAAGP,MAAM,CAACC,UAAU,CAAC;IACxB,KAAAO,MAAM,GAAGL,UAAU,CAACK,MAAM;IAC3B,KAAAC,SAAS,GAAG,IAAIL,gBAAgB,EAAE;EAG1C;EAEAM,KAAKA,CAACC,IAAU;IACZ,MAAMC,QAAQ,GAAG,GAAG,IAAI,CAACJ,MAAM,aAAa;IAC5C,OAAO,IAAI,CAACD,IAAI,CAACM,IAAI,CAACD,QAAQ,EAAED,IAAI,CAAC;EACzC;EAEAG,QAAQA,CAACH,IAAU;IACf,MAAMI,WAAW,GAAG,GAAG,IAAI,CAACP,MAAM,gBAAgB;IAClD,OAAO,IAAI,CAACD,IAAI,CAACM,IAAI,CAACE,WAAW,EAAEJ,IAAI,CAAC;EAC5C;EAEAK,WAAWA,CAACC,KAAa;IACrB,MAAMC,OAAO,GAAG,IAAIhB,WAAW,CAAC;MAC5B,cAAc,EAAE,kBAAkB;MAClC,eAAe,EAAE,UAAUe,KAAK;KACnC,CAAC;IACF,MAAME,OAAO,GAAG;MAACD,OAAO,EAAEA;IAAO,CAAC;IAElC;IACA;IACA;IAEA,OAAO,IAAI,CAACX,IAAI,CAACa,GAAG,CAACC,OAAO,CAAC;EACjC;EAAC,QAAAC,CAAA,G;qBA9BQjB,WAAW;EAAA;EAAA,QAAAkB,EAAA,G;WAAXlB,WAAW;IAAAmB,OAAA,EAAXnB,WAAW,CAAAoB,IAAA;IAAAC,UAAA,EAFR;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}