{"ast":null,"code":"import { inject } from '@angular/core';\nimport { HttpClient, HttpHeaders } from \"@angular/common/http\";\nimport { enviroment } from \"../enviroment/enviroment\";\nimport { JwtHelperService } from \"@auth0/angular-jwt\";\nimport * as i0 from \"@angular/core\";\nexport class AuthService {\n  constructor() {\n    this.http = inject(HttpClient);\n    this.apiUrl = enviroment.apiUrl;\n    this.jwtHelper = new JwtHelperService();\n    this.user = {\n      username: ''\n    };\n  }\n  //frontend login\n  login(user) {\n    const loginUrl = `${this.apiUrl}/auth/login`;\n    return this.http.post(loginUrl, user);\n  }\n  //frontend registration\n  register(user) {\n    const registerUrl = `${this.apiUrl}/auth/register`;\n    return this.http.post(registerUrl, user);\n  }\n  getUserData(token) {\n    const userUrl = `${this.apiUrl}/user`;\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    });\n    const options = {\n      headers: headers\n    };\n    return this.http.get(`${userUrl}`, options);\n  }\n  setToken(token) {\n    localStorage.setItem('Token', token);\n  }\n  userData() {\n    return this.user;\n  }\n  setUserData(data) {\n    this.user.username = data.username;\n  }\n  logout() {\n    localStorage.removeItem('Token');\n  }\n  isAuthenticated() {\n    const token = localStorage.getItem('Token');\n    // Return true if the token is present and not expired\n    return !!token && !this.isTokenExpired(token);\n  }\n  isTokenExpired(token) {\n    const expirationDate = this.getTokenExpirationDate(token);\n    return expirationDate && expirationDate < new Date();\n  }\n  getTokenExpirationDate(token) {\n    const decoded = this.decodeToken(token);\n    if (!decoded || !decoded.exp) {\n      return null;\n    }\n    const expirationDate = new Date(0);\n    expirationDate.setUTCSeconds(decoded.exp);\n    return expirationDate;\n  }\n  decodeToken(token) {\n    try {\n      return JSON.parse(atob(token.split('.')[1]));\n    } catch (error) {\n      return null;\n    }\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["inject","HttpClient","HttpHeaders","enviroment","JwtHelperService","AuthService","constructor","http","apiUrl","jwtHelper","user","username","login","loginUrl","post","register","registerUrl","getUserData","token","userUrl","headers","options","get","setToken","localStorage","setItem","userData","setUserData","data","logout","removeItem","isAuthenticated","getItem","isTokenExpired","expirationDate","getTokenExpirationDate","Date","decoded","decodeToken","exp","setUTCSeconds","JSON","parse","atob","split","error","_","_2","factory","ɵfac","providedIn"],"sources":["/Users/puurkos/Desktop/ANGULAR/scoreboardprov2/frontend/src/app/services/auth.service.ts"],"sourcesContent":["import {inject, Injectable} from '@angular/core';\nimport {User} from \"../models/user.model\";\nimport {HttpClient, HttpHeaders} from \"@angular/common/http\";\nimport {enviroment} from \"../enviroment/enviroment\";\nimport {Observable} from \"rxjs\";\nimport {JwtHelperService} from \"@auth0/angular-jwt\";\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class AuthService {\n    private http = inject(HttpClient)\n    readonly apiUrl = enviroment.apiUrl;\n    private jwtHelper = new JwtHelperService();\n    user: User = {\n        username: '',\n    }\n\n    constructor() {\n    }\n\n    //frontend login\n    login(user: User): Observable<any> {\n        const loginUrl = `${this.apiUrl}/auth/login`;\n        return this.http.post(loginUrl, user);\n    }\n\n    //frontend registration\n    register(user: User): Observable<any> {\n        const registerUrl = `${this.apiUrl}/auth/register`;\n        return this.http.post(registerUrl, user);\n    }\n\n    getUserData(token: string) {\n        const userUrl = `${this.apiUrl}/user`;\n        const headers = new HttpHeaders({\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${token}`\n        })\n        const options = {headers: headers};\n        return this.http.get(`${userUrl}`, options)\n\n    }\n\n    setToken(token: string) {\n        localStorage.setItem('Token', token)\n    }\n\n    userData() {\n        return this.user\n    }\n\n    setUserData(data: any) {\n        this.user.username = data.username\n    }\n\n    logout() {\n        localStorage.removeItem('Token');\n    }\n\n    isAuthenticated(): boolean {\n        const token = localStorage.getItem('Token');\n        // Return true if the token is present and not expired\n        return !!token && !this.isTokenExpired(token);\n    }\n\n    private isTokenExpired(token: string): null | boolean {\n        const expirationDate = this.getTokenExpirationDate(token);\n        return expirationDate && expirationDate < new Date();\n    }\n\n    private getTokenExpirationDate(token: string): Date | null {\n        const decoded = this.decodeToken(token);\n        if (!decoded || !decoded.exp) {\n            return null;\n        }\n        const expirationDate = new Date(0);\n        expirationDate.setUTCSeconds(decoded.exp);\n        return expirationDate;\n    }\n\n    private decodeToken(token: string): any {\n        try {\n            return JSON.parse(atob(token.split('.')[1]));\n        } catch (error) {\n            return null;\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}