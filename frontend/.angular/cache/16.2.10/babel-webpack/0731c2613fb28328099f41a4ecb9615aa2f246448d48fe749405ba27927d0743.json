{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, inject } from '@angular/core';\nimport { NgClass, NgIf, UpperCasePipe } from \"@angular/common\";\nimport { FormBuilder, ReactiveFormsModule, Validators } from \"@angular/forms\";\nimport { AuthService } from \"../../services/auth.service\";\nimport { MatProgressSpinnerModule } from \"@angular/material/progress-spinner\";\nimport { ActivatedRoute, Router, RouterLink } from \"@angular/router\";\nexport let AuthComponent = class AuthComponent {\n  constructor() {\n    this.isLoginMode = true;\n    this.fb = inject(FormBuilder);\n    this.authService = inject(AuthService);\n    this.route = inject(ActivatedRoute);\n    this.router = inject(Router);\n    this.responseResult = '';\n    this.errorResult = '';\n    this.user = {\n      username: '',\n      password: ''\n    };\n  }\n  ngOnInit() {\n    this.authForm = this.fb.group({\n      login: ['', [Validators.required, Validators.minLength(6)]],\n      password: ['', [Validators.required, Validators.minLength(6)]]\n    });\n    this.route.params.subscribe(params => {\n      const action = params['action'];\n      this.isLoginMode = action === 'login';\n    });\n  }\n  onSubmit() {\n    this.user.username = this.authForm.value.login;\n    this.user.password = this.authForm.value.password;\n    if (this.isLoginMode) {\n      //login post\n      this.authService.login(this.user).subscribe(response => {\n        if (response.token) {\n          this.responseResult = 'logged succesfully. you will be redirected!';\n          // console.log(response.token)\n          // this.authService.setToken(response.token)\n          // this.authService.getUserData(response.token).subscribe((response)=>{\n          //   this.authService.setUserData(response)\n          // },(error)=>{\n          //   console.error(error)\n          // })\n          // console.log(response.token)\n          setTimeout(() => {\n            this.router.navigate(['/']);\n          }, 1000);\n        }\n      }, error => {\n        this.errorResult = error.error.error;\n      });\n    } else {\n      //register post\n      this.authService.register(this.user).subscribe(response => {\n        this.responseResult = 'registered successfully. you have to log in now!';\n        setTimeout(() => {\n          this.router.navigate(['/auth/login']);\n        }, 1000);\n      }, error => {\n        this.errorResult = error.error.error;\n      });\n    }\n    this.authForm.reset();\n    this.responseResult = '';\n  }\n  toggleMode() {\n    this.isLoginMode = !this.isLoginMode;\n    this.authForm.reset();\n  }\n};\nAuthComponent = __decorate([Component({\n  standalone: true,\n  selector: 'app-auth',\n  templateUrl: './auth.component.html',\n  imports: [NgIf, ReactiveFormsModule, UpperCasePipe, NgClass, MatProgressSpinnerModule, RouterLink],\n  styleUrls: ['./auth.component.sass']\n})], AuthComponent);","map":{"version":3,"names":["Component","inject","NgClass","NgIf","UpperCasePipe","FormBuilder","ReactiveFormsModule","Validators","AuthService","MatProgressSpinnerModule","ActivatedRoute","Router","RouterLink","AuthComponent","constructor","isLoginMode","fb","authService","route","router","responseResult","errorResult","user","username","password","ngOnInit","authForm","group","login","required","minLength","params","subscribe","action","onSubmit","value","response","token","setTimeout","navigate","error","register","reset","toggleMode","__decorate","standalone","selector","templateUrl","imports","styleUrls"],"sources":["/Users/puurkos/Desktop/ANGULAR/scoreboardprov2/frontend/src/app/pages/auth/auth.component.ts"],"sourcesContent":["import {Component, inject, OnInit} from '@angular/core';\nimport {NgClass, NgIf, UpperCasePipe} from \"@angular/common\";\nimport {Form, FormBuilder, FormGroup, FormsModule, ReactiveFormsModule, Validators} from \"@angular/forms\";\nimport {AuthService} from \"../../services/auth.service\";\nimport {HttpClient} from \"@angular/common/http\";\nimport {User} from \"../../models/user.model\";\nimport {MatProgressSpinnerModule} from \"@angular/material/progress-spinner\";\nimport {ActivatedRoute, Router, RouterLink} from \"@angular/router\";\n\n@Component({\n  standalone: true,\n  selector: 'app-auth',\n  templateUrl: './auth.component.html',\n  imports: [\n    NgIf,\n    ReactiveFormsModule,\n    UpperCasePipe,\n    NgClass,\n    MatProgressSpinnerModule,\n    RouterLink\n  ],\n  styleUrls: ['./auth.component.sass']\n})\nexport class AuthComponent implements OnInit{\n  isLoginMode = true;\n  private fb = inject(FormBuilder);\n  private authService = inject(AuthService);\n  private route = inject(ActivatedRoute)\n  router = inject(Router)\n  responseResult: string = '';\n  errorResult: string = '';\n  user: User = {\n    username:'',\n    password:''\n  }\n  authForm! : FormGroup\n  constructor() {\n  }\n\n  ngOnInit(): void {\n    this.authForm = this.fb.group({\n      login: ['',[Validators.required, Validators.minLength(6)]],\n      password: ['',[Validators.required, Validators.minLength(6)]],\n    })\n\n    this.route.params.subscribe(params=> {\n      const action = params['action'];\n      this.isLoginMode = action === 'login';\n    })\n  }\n  onSubmit() {\n    this.user.username = this.authForm.value.login;\n    this.user.password = this.authForm.value.password;\n    if(this.isLoginMode) {\n      //login post\n      this.authService.login(this.user).subscribe(\n          (response)=>{\n              if(response.token) {\n                this.responseResult = 'logged succesfully. you will be redirected!'\n                // console.log(response.token)\n                // this.authService.setToken(response.token)\n                // this.authService.getUserData(response.token).subscribe((response)=>{\n                //   this.authService.setUserData(response)\n                // },(error)=>{\n                //   console.error(error)\n                // })\n                // console.log(response.token)\n\n                setTimeout(()=>{\n                  this.router.navigate(['/'])\n                },1000)\n              }\n          },\n          (error)=> {\n              this.errorResult = error.error.error;\n          }\n      )\n    } else {\n      //register post\n      this.authService.register(this.user).subscribe(\n          (response)=>{\n              this.responseResult = 'registered successfully. you have to log in now!'\n                setTimeout(()=>{\n                    this.router.navigate(['/auth/login'])\n                },1000)\n          },\n          (error)=> {\n              this.errorResult = error.error.error\n          }\n      )\n    }\n    this.authForm.reset()\n    this.responseResult=''\n  }\n  toggleMode() {\n    this.isLoginMode = !this.isLoginMode;\n    this.authForm.reset();\n  }\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}