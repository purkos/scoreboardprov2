{"ast":null,"code":"import { inject } from '@angular/core';\nimport { HttpClient } from \"@angular/common/http\";\nimport { enviroment } from \"../enviroment/enviroment\";\nimport { BehaviorSubject, tap } from \"rxjs\";\nimport { JwtHelperService } from \"@auth0/angular-jwt\";\nimport * as i0 from \"@angular/core\";\nexport class AuthService {\n  constructor() {\n    this.http = inject(HttpClient);\n    this.apiUrl = enviroment.apiUrl;\n    this.jwtHelper = new JwtHelperService();\n    this.router = user;\n    this.User = {\n      username: ''\n    };\n    this.userDataSubject = new BehaviorSubject({\n      username: ''\n    });\n    this.isAuthenticatedSubject = new BehaviorSubject(false);\n  }\n  //frontend login\n  login(user) {\n    const loginUrl = `${this.apiUrl}/auth/login`;\n    return this.http.post(loginUrl, user).pipe(tap(response => {\n      if (response.token) {\n        this.setToken(response.token);\n        this.setUserData(response.userData);\n        this.setAuthenticationStatus(true);\n      }\n    }));\n  }\n  //frontend registration\n  register(user) {\n    const registerUrl = `${this.apiUrl}/auth/register`;\n    return this.http.post(registerUrl, user);\n  }\n  //Zapytanie na backend z tokenem o dane uzytkownika\n  // getUserData(token: string) {\n  //     const userUrl = `${this.apiUrl}/user`;\n  //     const headers = new HttpHeaders({\n  //         'Content-Type': 'application/json',\n  //         'Authorization': `Bearer ${token}`\n  //     })\n  //     const options = {headers: headers};\n  //     return this.http.get(`${userUrl}`, options)\n  //\n  // }\n  setToken(token) {\n    localStorage.setItem('Token', token);\n  }\n  userData() {\n    return this.userDataSubject.asObservable();\n  }\n  setUserData(data) {\n    this.user.username = data.username;\n    this.userDataSubject.next(this.user);\n  }\n  logout() {\n    localStorage.removeItem('Token');\n    this.router.navigate(['/']);\n  }\n  isAuthenticated() {\n    const token = localStorage.getItem('Token');\n    // Return true if the token is present and not expired\n    return !!token && !this.isTokenExpired(token);\n  }\n  //zmiany stanu logowania\n  setAuthenticationStatus(isAuthenticated) {\n    this.isAuthenticatedSubject.next(isAuthenticated);\n  }\n  onAuthenticationStatusChange() {\n    return this.isAuthenticatedSubject.asObservable();\n  }\n  autoLogin() {\n    if (this.isAuthenticated()) {\n      this.setAuthenticationStatus(true);\n    }\n  }\n  isTokenExpired(token) {\n    const expirationDate = this.getTokenExpirationDate(token);\n    return expirationDate && expirationDate < new Date();\n  }\n  getTokenExpirationDate(token) {\n    const decoded = this.decodeToken(token);\n    if (!decoded || !decoded.exp) {\n      return null;\n    }\n    const expirationDate = new Date(0);\n    expirationDate.setUTCSeconds(decoded.exp);\n    return expirationDate;\n  }\n  decodeToken(token) {\n    try {\n      return JSON.parse(atob(token.split('.')[1]));\n    } catch (error) {\n      return null;\n    }\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["inject","HttpClient","enviroment","BehaviorSubject","tap","JwtHelperService","AuthService","constructor","http","apiUrl","jwtHelper","router","user","User","username","userDataSubject","isAuthenticatedSubject","login","loginUrl","post","pipe","response","token","setToken","setUserData","userData","setAuthenticationStatus","register","registerUrl","localStorage","setItem","asObservable","data","next","logout","removeItem","navigate","isAuthenticated","getItem","isTokenExpired","onAuthenticationStatusChange","autoLogin","expirationDate","getTokenExpirationDate","Date","decoded","decodeToken","exp","setUTCSeconds","JSON","parse","atob","split","error","_","_2","factory","ɵfac","providedIn"],"sources":["/Users/puurkos/Desktop/ANGULAR/scoreboardprov2/frontend/src/app/services/auth.service.ts"],"sourcesContent":["import {inject, Injectable} from '@angular/core';\nimport {User} from \"../models/user.model\";\nimport {HttpClient, HttpHeaders} from \"@angular/common/http\";\nimport {enviroment} from \"../enviroment/enviroment\";\nimport {BehaviorSubject, Observable, tap} from \"rxjs\";\nimport {JwtHelperService} from \"@auth0/angular-jwt\";\ninterface LoginResponse {\n    token: string;\n    userData: any;\n}\n@Injectable({\n    providedIn: 'root'\n})\nexport class AuthService {\n    private http = inject(HttpClient)\n    readonly apiUrl = enviroment.apiUrl;\n    private jwtHelper = new JwtHelperService();\n    private router = \n    user: User = {\n        username: '',\n    }\n    private userDataSubject = new BehaviorSubject<User>({username:''});\n    private isAuthenticatedSubject = new BehaviorSubject<boolean>(false);\n\n\n    constructor() {\n    }\n\n    //frontend login\n    login(user: User): Observable<LoginResponse> {\n        const loginUrl = `${this.apiUrl}/auth/login`;\n        return this.http.post<LoginResponse>(loginUrl, user).pipe(\n            tap((response) => {\n                if (response.token) {\n                    this.setToken(response.token);\n                    this.setUserData(response.userData);\n                    this.setAuthenticationStatus(true)\n                }\n            })\n        );\n    }\n\n    //frontend registration\n    register(user: User): Observable<any> {\n        const registerUrl = `${this.apiUrl}/auth/register`;\n        return this.http.post(registerUrl, user);\n    }\n    //Zapytanie na backend z tokenem o dane uzytkownika\n    // getUserData(token: string) {\n    //     const userUrl = `${this.apiUrl}/user`;\n    //     const headers = new HttpHeaders({\n    //         'Content-Type': 'application/json',\n    //         'Authorization': `Bearer ${token}`\n    //     })\n    //     const options = {headers: headers};\n    //     return this.http.get(`${userUrl}`, options)\n    //\n    // }\n\n    setToken(token: string) {\n        localStorage.setItem('Token', token)\n    }\n\n    userData():Observable<User> {\n        return this.userDataSubject.asObservable()\n    }\n\n    setUserData(data: any) {\n        this.user.username = data.username\n        this.userDataSubject.next(this.user)\n    }\n\n    logout() {\n        localStorage.removeItem('Token');\n        this.router.navigate(['/'])\n    }\n\n    isAuthenticated(): boolean {\n        const token = localStorage.getItem('Token');\n        // Return true if the token is present and not expired\n        return !!token && !this.isTokenExpired(token);\n    }\n    //zmiany stanu logowania\n    setAuthenticationStatus(isAuthenticated:boolean) {\n        this.isAuthenticatedSubject.next(isAuthenticated);\n    }\n    onAuthenticationStatusChange():Observable<boolean> {\n        return this.isAuthenticatedSubject.asObservable();\n    }\n    autoLogin() {\n        if(this.isAuthenticated()) {\n            this.setAuthenticationStatus(true)\n        }\n    }\n\n    private isTokenExpired(token: string): null | boolean {\n        const expirationDate = this.getTokenExpirationDate(token);\n        return expirationDate && expirationDate < new Date();\n    }\n\n    private getTokenExpirationDate(token: string): Date | null {\n        const decoded = this.decodeToken(token);\n        if (!decoded || !decoded.exp) {\n            return null;\n        }\n        const expirationDate = new Date(0);\n        expirationDate.setUTCSeconds(decoded.exp);\n        return expirationDate;\n    }\n\n    private decodeToken(token: string): any {\n        try {\n            return JSON.parse(atob(token.split('.')[1]));\n        } catch (error) {\n            return null;\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}